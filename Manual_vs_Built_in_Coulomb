atoms=[]
with open(folder_path + "/"+ "dsgdb9nsd_000881.xyz", "r") as f:
    lines = f.readlines()
    #lines[1].split()[9] #homo-lumo gap
    #print(lines[1].split())
    for line in lines[2:len(lines) - 3]:
        atoms.append(line.split()[:4])
        labels=[]
    for atom in atoms:
        labels.append(atom[0])
    for atom in atoms:
        atom[0] = pt.elements.symbol(atom[0]).number
    for atom in atoms:
        atom[1:] = [float(x) for x in atom[1:]]
    M = len(atoms)
    N = len(atoms)
    manual_Coulomb = [[0] * N for _ in range(M)]
    for i in range(len(atoms)):
        for j in range(len(atoms)):
            if atoms[i] != atoms[j]:
                manual_Coulomb[i][j] = (atoms[i][0]*atoms[j][0]) / np.linalg.norm(np.array(atoms[i]) - np.array(atoms[j]))
            elif atoms[i] == atoms[j]:
                manual_Coulomb[i][j] = (0.5) * (atoms[i][0]**2.4)
np.array(manual_Coulomb).flatten()
new_atoms=[]
for atom in atoms:
    new_atoms.append(atom[1:])


A = tuple([labels,new_atoms])
built_in_Coulomb = CoulombMatrix().fit_transform([A]).flatten()
manual_Coulomb=np.array(manual_Coulomb).flatten()
msk = (manual_Coulomb == built_in_Coulomb)
np.where(msk == False)


# Checking in case they are the matrices with the same values but different order
Counter=0
for elem1 in manual_Coulomb:
    for elem2 in built_in_Coulomb:
        if elem1 == elem2:
            Counter += 1
            list(built_in_Coulomb).remove(elem2)
        elif elem1 != elem2:
            Counter += 0


manual_Coulomb
